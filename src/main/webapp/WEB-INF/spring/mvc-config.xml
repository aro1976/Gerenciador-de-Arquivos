<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Forwards requests to the "/" resource to the "welcome" view -->
	<mvc:view-controller path="/" view-name="redirect:/arquivos/consultar"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
	<mvc:resources location="/, classpath:/META-INF/web-resources/" mapping="/resources/**"/>
	
		<!-- selects a static view for rendering without the need for an explicit controller -->
	<mvc:view-controller path="/seguranca/entrar"/>
    <mvc:view-controller path="/" view-name="index"/>
	
	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler/>
	
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
				<!-- Scan views directory for Tiles configurations -->
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>
  
<!--   	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
		<property name="exceptionMappings">
			<props>
				<prop key=".DataAccessException">dataAccessFailure</prop>
				<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
				<prop key=".TypeMismatchException">resourceNotFound</prop>
				<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
			</props>
		</property>
	</bean>
 -->	
	<bean id="contentNegotiatingViewResolver" 
	   class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver"
	   p:order="#{T(org.springframework.core.Ordered).HIGHEST_PRECEDENCE}">
	      <property name="mediaTypes">
	         <map>
	            <entry key="html" value="text/html" />
	            <entry key="xml" value="application/xml" />
	            <entry key="json" value="application/json" />
	         </map>
	      </property>
	      <property name="viewResolvers">
			<list>
				<!-- <bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/> -->
				<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
		    <list>
		    	<bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		    		<property name="renderedAttributes">
				        <set>
				            <value>arquivo</value>  
				            <value>arquivos</value>            
				        </set>
				    </property>
		    	</bean>
		    	
 				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller" ref="jaxbMarshaller" />
				</bean>
		    </list>
	    </property>
	</bean>

	<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
	  	<property name="classesToBeBound">
			<list>
				<value>com.javahero.fileshare.domain.ArquivoMetadados</value>
				<value>com.javahero.fileshare.domain.ArquivoMetadadosList</value>
			</list>
		</property>
	</bean>

</beans>
